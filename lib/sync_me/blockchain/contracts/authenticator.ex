defmodule SyncMe.Authenticator do

  @rpc_url "https://mainnet.base.org"

  @validator_bytecode "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572"

  # The ABI of the validator constructor: takes (address signer, bytes32 hash, bytes signature)
  @validator_constructor_inputs [{"_signer", "address"}, {"_hash", "bytes32"}, {"_signature", "bytes"}]

  # Magic bytes suffix for ERC-6492
  @magic_bytes "0x649264926492649264926492649264926492649264926492649264926492"

  @presignMessagePrefix  "\x19Ethereum Signed Message:\n"


  # Encode constructor args. You may use e.g. ABI encoding library or build manually.
  def encode_constructor_args(signer_address, hash_value, signature) do
    # You'll need an Elixir ABI‐encoder library or implement the encoding:
    # e.g. encode_address(signer_address) <> encode_bytes32(hash_value) <> encode_bytes(signature)
    # This is just a placeholder:
    ABI.encode(@validator_constructor_inputs, [signer_address, hash_value, signature])
  end

  def string_to_hex( message) do
    "0x" <> Base.encode16( message , case: :lower)
  end

  def size(value) do
     case String.starts_with?(value, "0x") do
       true -> :math.ceil( (String.length(value) - 2)/2) |> trunc()
       false -> :math.ceil( String.length(value)/2) |> trunc()
     end
  end

  def concat(prefix, message) do
    "0x" <> String.trim(prefix, "0x") <> String.trim(message, "0x")
  end

  def hash(value) do
    Base.decode16!(String.trim_leading(value, "0x"), case: :lower)
    |> ExKeccak.hash_256()
    |> string_to_hex()
  end


  def to_prefixed_message( message ) do
    hex_message = string_to_hex(message)
    prefix = string_to_hex( "#{@presignMessagePrefix}#{size(hex_message)}")
    concat( prefix, hex_message)
  end

  def verify_counterfactual_signature(signer_address, hash_value, signature) do
    # Check if signature ends with magic bytes → then it's ERC-6492 wrapped
    is_wrapped =
      String.ends_with?(signature, String.trim_leading(@magic_bytes, "0x"))

    # If it is wrapped: you already should have factory address & factoryData inside signature wrapper
    # (your upstream logic should unwrap if needed, or you treat it as is)
    # For simplicity we assume signature is already the wrapped form.

    # Construct deployment data:
    constructor_data = encode_constructor_args(signer_address, hash_value, signature)
    data_payload = @validator_bytecode <> String.trim_leading(constructor_data, "0x")

    # Build the rpc call params
    params = %{
      "to" => nil,  # or "0x0000000000000000000000000000000000000000"
      "data" => data_payload
      # optionally "from", "value", "gas", etc.
    }

    {:ok, result} = Ethereumex.HttpClient.eth_call(params, "latest", @rpc_url)

    # result is hex string: check if bool true
    # Possibly result == "0x1" or "0x01" etc depending on helper contract
    case result do
      "0x1" -> {:ok, true}
      _ -> {:error, :invalid_signature}
    end
  end

  def hash_message( message) do
    message
    |> to_prefixed_message()
    |> hash()



  end

  def verify_hash(_address, message, _signature) do
    hash = hash_message(message)
    IO.inspect(hash)
    #erc6492SignatureValidatorByteCode
  end

  def test_this() do
    msg = "localhost wants you to sign in with your Ethereum account:\n0x652574636c202993D19f99A9A5BAc9833787f74B\n\nURI: http://localhost:4000\nChain ID: 8453\nNonce: f902fdda7abd47a7b8dc5e1cb3cc8900"
    hash = "0xa080163a6653ce7a54dba59c59d29e7f4ff98570a3b892bf7665a1799a11ef13"
    address = "0x652574636c202993d19f99a9a5bac9833787f74b"
    signature ="0x000000000000000000000000ca11bde05977b3631167028862be2a173976ca11000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000024482ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ba5ed110efdba3d005bfc882d75358acbbb858420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001543ffba36f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000ae398f56c77c32234c7df2b5091787386b7ab664d2b41bda197250fdec7e2b37cfb49f5e20efd31165caec34dde6e67260ab623dfba7262022c77b0f1c75450000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f85210b21cc50302f477ba56686d2019dc9b67ade15b0a8c44ecad456533d0110ead2cec0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001171bcc5873fd36a72c65646dca6f8e44508d3c428a75ec9d4041c612889d9e6c307fca0375c5e214f59ec3b8c936298e1c71f77c0a74d078ff92c50437f77f8e0000000000000000000000000000000000000000000000000000000000000025f198086b2db17256731bc456673b96bcef23f51d1fbacdd7c4379ef65465572f1d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22554f6a465f626655734961467971464b426676777136375565636f7735495265335966582d43682d6a436f222c226f726967696e223a2268747470733a2f2f6b6579732e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492"
    args = %{
    "data" => "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572000000000000000000000000652574636c202993d19f99a9a5bac9833787f74ba080163a6653ce7a54dba59c59d29e7f4ff98570a3b892bf7665a1799a11ef13000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000ca11bde05977b3631167028862be2a173976ca11000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000024482ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ba5ed110efdba3d005bfc882d75358acbbb858420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001543ffba36f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000ae398f56c77c32234c7df2b5091787386b7ab664d2b41bda197250fdec7e2b37cfb49f5e20efd31165caec34dde6e67260ab623dfba7262022c77b0f1c75450000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f85210b21cc50302f477ba56686d2019dc9b67ade15b0a8c44ecad456533d0110ead2cec0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001ff1d7ea5bc2f8ca72e25ae8c9a43ac3bcf3f323ce0ba6b467d587dbf71f910966d5e37561d9f14cab72b2dece9a8de3246fe0d9b3559e7273ef6227b28ea25430000000000000000000000000000000000000000000000000000000000000025f198086b2db17256731bc456673b96bcef23f51d1fbacdd7c4379ef65465572f1d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a226e3747662d4445353244456873773551733959734f7648696856585f78474e53464c33413374653657676b222c226f726967696e223a2268747470733a2f2f6b6579732e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492"
    }
    {msg, hash, address, signature}
  end

end
